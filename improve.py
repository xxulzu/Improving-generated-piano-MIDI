from music21 import *
import random

'''
Ameliorate the piano MIDI files generated by machines.
'''

def tempoProcess(ms):
    '''Delete repeated Tempos'''
    flag=0 # the first tempo
    pretemponum=0
    needremove = []
    for i in range(0,len(ms)):
        if type(ms[i]) == tempo.MetronomeMark:
            if flag == 0:
                flag = 1
                pretemponum = ms[i].number
            elif flag==1:
                if pretemponum == ms[i].number:
                    needremove.append(ms[i])
                else:
                    pretemponum = ms[i].number
    for i in needremove:
        ms.remove(i)

def voiceProcess(ms):
    '''Delete void Voices'''
    voices = ms.recurse().getElementsByClass(stream.Voice)
    needremove = []
    for v in voices:
        if len(v)==0:                     # Voice is empty
            needremove.append(v)
        else:
            flag = 1                      # Everything in Voice is Rest
            for el in v:
                if type(el)!=note.Rest:
                    flag=0
            if flag==1:
                needremove.append(v)
    for i in needremove:
        ms.remove(i)

def restProcess(ms):
    '''Rest: over the half of the measure's duration -> major/minor third'''
    rests = ms.recurse().getElementsByClass(note.Rest)
    mskey = ms.analyze('key')
    rootnote = mskey.tonic.midi
    length = len(rests)
    for i in range(0,length):
        if rests[i].duration.quarterLength >= (ms.barDuration.quarterLength / 2.0 + 1):
            if mskey.mode=='major':
                addChord = chord.Chord([rootnote, rootnote+4])
                addChord.duration.quarterLength = rests[i].duration.quarterLength/2.0
                preVoice = rests[i].sites.getObjByClass(stream.Voice)
                ans=0
                for el in preVoice:
                    if el.id == rests[i].id:
                        break
                    ans += 1
                preVoice.insert(i,addChord)
            else:
                addChord = chord.Chord([rootnote, rootnote+3])
                addChord.duration.quarterLength = rests[i].duration.quarterLength/2.0
                preVoice = rests[i].sites.getObjByClass(stream.Voice)
                ans=0
                for el in preVoice:
                    if el.id == rests[i].id:
                        break
                    ans += 1
                preVoice.insert(i,addChord)

def chordProcess(ms):
    """Spacey chords to chords in closed positions"""
    chords = ms.recurse().getElementsByClass(chord.Chord)
    length = len(chords)
    for i in range(0,length):
        tmpchord = chords.getElementById(chords[i].id)
        tmpchord.semiClosedPosition(inPlace=True)

def noteProcess(ms):
    notes = ms.recurse().getElementsByClass(note.Note)
    """Delete spacey notes"""
    midinum = []
    midis = {}
    for i in range(0,129):
        midis[i]=0
    flag1 = 1
    flag2 = 1
    for n in notes:
        midinum.append(n.pitch.midi)
        midis[n.pitch.midi] = midis[n.pitch.midi]+1
    midinum.sort()
    if len(midinum)>2:
        if midinum[1]-midinum[0]>12:     # too low
            flag1 = 0
        if midinum[-1]-midinum[-2]>12:   # too high
            flag2 = 0
    
    needremove = []
    if flag1==0:
        for n in notes:
            if n.pitch.midi==midinum[0]:
                needremove.append(n)
                break
    if flag2==0:
        for n in notes:
            if n.pitch.midi==midinum[-1]:
                needremove.append(n)
                break
    
    for n in needremove:
        notes.remove(n)
        
    """Delete overly repeated notes and replace it"""
    needchange = []
    for key, value in midis.items():
        if value>=4:
            needchange.append(key)
    
    for n in notes:
        if n.pitch.midi in needchange:
            n.pitch.midi += random.sample([0,2,4],1)[0]

def improveMIDI(midiParse):
    for par in midiParse.parts:
        par.makeMeasures(inPlace=True)
        mses = par.getElementsByClass(stream.Measure)
        for ms in mses:
            tempoProcess(ms)
            voiceProcess(ms)
            restProcess(ms)
            noteProcess(ms)
            chordProcess(ms)
    midiParse.write('midi','improvedMIDI.midi')

if __name__ == '__main__':
    midiParse = converter.parse('test.midi')
    improveMIDI(midiParse)
